9. Week

Exercise 1: Add six

Declare a function called createBase. The function takes a number as a parameter and return a closure, that adds a number to the base number argument.

Call the function three times. The return values should be:

15
24
33
It should look a little like this:

function createBase() {
  // Put here your logic...
}

const addSix = createBase(6);

// Put here your function calls...
addSix();

Solution:

function createBase(number) {
  let multiplier = 0;
  let total = 9;
  return function () {
    total += number + (multiplier * number) / 2;
    multiplier++;
    return total;
  };
}

const addSix = createBase(6);

// Put here your function calls...
console.log(addSix());
console.log(addSix());
console.log(addSix());

Exercise 2: Take out the duplicates

Write a function called removeDuplicates, that takes in an array as an argument:

const letters = ['a', 'b', 'b', 'c', 'd', 'a', 'e', 'f', 'f', 'c', 'b'];
The function should modifies the original array: it should remove duplicate letters and return the result.

The end result should be:

['a', 'b', 'c', 'd', 'e', 'f'];

Solution:

let letters = ['a', 'b', 'c', 'd', 'a', 'e', 'f', 'c', 'b'];
let lettersCopy = letters;

function removeDuplicates(array) {
  array = [...new Set(array)];
  return array;
}

console.log(removeDuplicates(letters));

if (letters === ['a', 'b', 'c', 'd', 'e', 'f']) {
  console.log('Hooray!');
}

Exercise 3: Guess the output

In this exercise you'll be presented with a code snippet. Your task is to guess the output and write out your reasoning in 50 words or less.

// Snippet
let a = 10;
const x = (function() {
  a = 12;
  return function() {
    alert(a);
  };
})();

x();

Solution:

//"a" is assigned as a value of 10 in global scope.
// Therefore, it is accessible from everywhere, within the function as well.
// So when you reassingned "a" as 12, the new value of "a" will be 12.
//Due to "a" is also accessible from the closure (second function), the function will alert 12.

Exercise 4: Guess more

In this exercise you'll be presented with another code snippet. Guess the output and write out your reasoning in 50 words or less.

// Snippet
const x = 9;
function f1(val) {
  val = val + 1;
  return val;
}
f1(x);
console.log(x);

const y = { x: 9 };
function f2(val) {
  val.x = val.x + 1;
  return val;
}
f2(y);
console.log(y);

Solution:

// In the first example the value of the "val" only changes within the function or between {} in other words,
// The changes are not reflected outside the function.
//So the result will be 9 again.

// On the other hand, even if it can be seen the same with the first example, when you change the value of the properties of an object,
// The changes are reflected outside the function.
//So the result will be 10.

Exercise 5: The lottery machine

Don't you just love the thrill of the lottery? What if I told you we can make our own lottery machine? Let's get started!

Write a function that takes 4 arguments.

A start value
An end value
A callback that executes if the number is divisible by 3
A callback that executes if the number is divisible by 5
The function should first generate an array containing values from start value to end value (inclusive).

Then the function should take the newly created array and iterate over it, and calling the first callback if the array value is divisible by 3.

The function should call the second callback if the array value is divisible by 5.

Both functions should be called if the array value is divisible by both 3 and 5.

Here is a starter template:

function threeFive(startIndex, stopIndex, threeCallback, fiveCallback) {
  const numbers = [];
  // make array
  // start at beginning of array and check if you should call threeCallback or fiveCallback or go on to next
}

threeFive(10, 15, sayThree, sayFive);

// Should create an array [10,11,12,13,14,15]
// and call sayFive, sayThree, sayThree, sayFive

Solution:

function threeFive(startIndex, stopIndex, threeCallback, fiveCallback) {
  const numbers = [];
  for (let i = startIndex; i <= stopIndex; i++) {
    numbers.push(i);
  }

  numbers.forEach((number) => {
    if (number % 3 === 0 && number % 5 === 0) {
      threeCallback(number);
      fiveCallback(number);
    } else if (number % 3 === 0) {
      threeCallback(number);
    } else if (number % 5 === 0) {
      fiveCallback(number);
    }
  });
}

const sayThree = function (number) {
  console.log(number + ' is divisible by three');
};
const sayFive = function (number) {
  console.log(number + ' is divisible by five');
};
threeFive(10, 15, sayThree, sayFive);

